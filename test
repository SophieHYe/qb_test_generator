    working_file = open("json_testcases/"+algo+".json", 'r')

        for line in working_file:
            py_testcase = json.loads(line)
            print(py_testcase)
            test_in, test_out = py_testcase
            if not isinstance(test_in, list):
                # input is required to be a list, as multiparameter algos need to deconstruct a list of parameters
                # should fix in testcases, force all inputs to be list of inputs
                test_in = [test_in]
                # unsure how to make immutable; previous versions just used copy.deepcopy

            # check good Python version
            py_out_good = py_try(algo, *copy.deepcopy(test_in), correct=True)
            print("Correct Python: " + prettyprint(py_out_good))

            # check bad Python version
            py_out_test = py_try(algo, *copy.deepcopy(test_in))
            print("Bad Python: " + prettyprint(py_out_test))
            print("Analyzing {}".format(test_in))
			
            # check bad Java version
            for arg in copy.deepcopy(test_in):
            	print("--->{}".format(arg)) 
            try:
                p1 = subprocess.Popen(["/usr/bin/java", "JavaDeserialization", algo]+ \
                                    [json.dumps(arg) for arg in copy.deepcopy(test_in)], stdout=subprocess.PIPE,
                                    universal_newlines=True)
                java_out = p1.stdout.read()
                print("Bad Java:   " + prettyprint(java_out))
            except:
                print("Bad Java:   " + prettyprint(sys.exc_info()))

            print()